/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.tables.records.NomenclatureRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Nomenclature extends TableImpl<NomenclatureRecord> {

    private static final long serialVersionUID = -570415720;

    /**
     * The reference instance of <code>public.Nomenclature</code>
     */
    public static final Nomenclature NOMENCLATURE = new Nomenclature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NomenclatureRecord> getRecordType() {
        return NomenclatureRecord.class;
    }

    /**
     * The column <code>public.Nomenclature.name</code>.
     */
    public final TableField<NomenclatureRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Nomenclature.inside_code</code>.
     */
    public final TableField<NomenclatureRecord, Integer> INSIDE_CODE = createField("inside_code", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.Nomenclature</code> table reference
     */
    public Nomenclature() {
        this(DSL.name("Nomenclature"), null);
    }

    /**
     * Create an aliased <code>public.Nomenclature</code> table reference
     */
    public Nomenclature(String alias) {
        this(DSL.name(alias), NOMENCLATURE);
    }

    /**
     * Create an aliased <code>public.Nomenclature</code> table reference
     */
    public Nomenclature(Name alias) {
        this(alias, NOMENCLATURE);
    }

    private Nomenclature(Name alias, Table<NomenclatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Nomenclature(Name alias, Table<NomenclatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Nomenclature(Table<O> child, ForeignKey<O, NomenclatureRecord> key) {
        super(child, key, NOMENCLATURE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NOMENCLATURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<NomenclatureRecord> getPrimaryKey() {
        return Keys.NOMENCLATURE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<NomenclatureRecord>> getKeys() {
        return Arrays.<UniqueKey<NomenclatureRecord>>asList(Keys.NOMENCLATURE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nomenclature as(String alias) {
        return new Nomenclature(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Nomenclature as(Name alias) {
        return new Nomenclature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Nomenclature rename(String name) {
        return new Nomenclature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Nomenclature rename(Name name) {
        return new Nomenclature(name, null);
    }
}
